<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Sean Kelly</title>
		<link>https://spkelly.com/posts/</link>
		<description>Recent content in Posts on Sean Kelly</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Thu, 09 Apr 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://spkelly.com/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>GOES-17 Satellite Imagery</title>
			<link>https://spkelly.com/posts/goes/</link>
			<pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/goes/</guid>
			<description>I had seen some cool pictures online of images obtained using a SDR from GOES-17, a geostationary weather satellite over the west coast of the US. There is also a complementary GOES-16 over the east coast. There are also a few other similar satellites from different countries, in different locations, and different communication protocols. Due to the quarantine for COVID-19, now seemed like a good time to stay at home and point a dish at the sky with hopes of receiving images.</description>
			<content type="html"><![CDATA[<p>I had seen some cool pictures online of images obtained using a <a href="/posts/rtlsdr">SDR</a> from <a href="https://en.wikipedia.org/wiki/GOES-17">GOES-17</a>, a geostationary weather satellite over the west coast of the US. There is also a complementary GOES-16 over the east coast. There are also a few other similar satellites from different countries, in different locations, and different communication protocols. Due to the quarantine for COVID-19, now seemed like a good time to stay at home and point a dish at the sky with hopes of receiving images.</p>
<p>The first thing I had to do was to buy a few parts to go with my <a href="/posts/rtlsdr">SDR</a></p>
<p><a href="https://www.amazon.com/dp/B005M8KU3W/">Premiertek 2.4ghz WiFi grid antenna ($75)</a></p>
<p><a href="https://www.nooelec.com/store/sawbird-plus-goes.html">Nooelec GOES+ LNA and filter ($35)</a></p>
<p>A few SMA and type-N connectors to piece it all together (~$10)</p>
<p>Next up, I had to align the dish. I used <a href="https://www.dishpointer.com/">dishpointer</a> to get the azimuth, elevation, and skew from my current location. I then used a compass and bubble level app on my phone to set the dish up pointing in the general direction of where dishpointer told me. I knew I would refine this later as I found signal</p>
<p>My bike repair stand makes for a GREAT adjustable dish stand&hellip;</p>
<figure>
    <img src="/goes/dish_aligned.jpg"
         alt="Aligned dish"/> <figcaption>
            <p>Aligned dish</p>
        </figcaption>
</figure>

<p>The antenna I bought was a 2.4Ghz antenna intended for extending WiFi coverage. Since the signal from GOES-17 is 1.6941 GHz, there is a common modification that people have been doing to tune the antenna closer to this frequency. The modification is either to flip the reflector around, or install a small spacer between the reflector and the feed. I opted for a ~2.5cm spacer. This is a bit of a hack since the dipoles in the feed are still tuned for 2.4Ghz, but it is enough to work.</p>
<figure>
    <img src="/goes/dish_spacer.jpg"
         alt="Spacer installed to tune antenna closer to 1.7Ghz (from 2.4Ghz)"/> <figcaption>
            <p>Spacer installed to tune antenna closer to 1.7Ghz (from 2.4Ghz)</p>
        </figcaption>
</figure>

<p>Then I connected up my low noise amplifier/filter combo from Nooelec, and connected it to my SDR. The LNA would be powered by the SDR which has a built in bias-t circuit to supply DC voltage.</p>
<figure>
    <img src="/goes/dish_connections.jpg"/> 
</figure>

<p>After a bit of toying around (a lot a bit to be honest&hellip; different spacer lengths, reflector layouts, antenna orientations, etc..)&hellip; I found the signal and it was coming in pretty clearly!</p>
<figure>
    <img src="/goes/waterfall.png"/> 
</figure>

<p>I then switched to Ubuntu and built/setup <a href="https://github.com/pietern/goestools">goestools</a>. Goestools is a set of tools used to receive and decode the signal from the GOES satellite. Once I configured goestools to enable the bias-t on my sdr to provide power to the LNA, I fired it up and started adjusted the antenna slightly to try and minimize the viterbi error and minimize packet drops.</p>
<figure>
    <img src="/goes/goesrecv.png"/> 
</figure>

<p>Once this was done, I then started up goesproc and it started processing data and saving images!</p>
<figure>
    <img src="/goes/goesproc.png"/> 
</figure>

<p>Here is the first thing that came in!</p>
<figure>
    <img src="/goes/goes17_fd_fc_first_image.jpg"
         alt="First image!"/> <figcaption>
            <p>First image!</p>
        </figcaption>
</figure>

<p>Since this satellite is geostationary&hellip;I was done! I left it running for ~24 hours and stitched together the images using <a href="https://github.com/ImageMagick/ImageMagick/">ImageMagick</a> to make some nice gifs.</p>
<figure>
    <img src="/goes/goes17_fd_fc.gif"
         alt="GOES-17"/> <figcaption>
            <p>GOES-17</p>
        </figcaption>
</figure>

<p>GOES satellites have a few imagers and some can be requested by government agencies to point at specific things for certain reasons, these 2 gifs/sets of images are 2 additional images that get produced.</p>
<figure>
    <img src="/goes/goes17_m1_fc.gif"
         alt="GOES-17 M1, changed where it was pointing part of the way through"/> <figcaption>
            <p>GOES-17 M1, changed where it was pointing part of the way through</p>
        </figcaption>
</figure>

<figure>
    <img src="/goes/goes17_m2_fc.gif"
         alt="GOES-17 M2"/> <figcaption>
            <p>GOES-17 M2</p>
        </figcaption>
</figure>

<p>You can read about what it is pointed at and why here at the <a href="https://www.ospo.noaa.gov/Operations/messages.html">NOAA message list</a>.</p>
<p>The GOES satellites also have a relay system where they relay smaller images from a few other similar satellites.</p>
<figure>
    <img src="/goes/goes16_fd_ch13enhanced.gif"
         alt="NOAA GOES-16"/> <figcaption>
            <p>NOAA GOES-16</p>
        </figcaption>
</figure>

<figure>
    <img src="/goes/himawari8_fd_ir.gif"
         alt="Japanese Himawari-8"/> <figcaption>
            <p>Japanese Himawari-8</p>
        </figcaption>
</figure>

<p>I also received some National Weather Service data from the satellite&hellip;</p>
<p><figure>
    <img src="/goes/weather/1.gif"/> 
</figure>

<figure>
    <img src="/goes/weather/2.gif"/> 
</figure>

<figure>
    <img src="/goes/weather/3.gif"/> 
</figure>

<figure>
    <img src="/goes/weather/4.gif"/> 
</figure>

<figure>
    <img src="/goes/weather/5.gif"/> 
</figure>
</p>
<p>Reading more about this specific satellite (GOES-17), it has definitely had some problems. Most notable was <a href="https://www.goes-r.gov/users/GOES-17-ABI-Performance.html">GOES-17 ABI cooling failure</a> which lead to them running reduced hours at different parts of the year to prevent the images from being over-saturated due to overheating.</p>
]]></content>
		</item>
		
		<item>
			<title>Bread</title>
			<link>https://spkelly.com/posts/bread/</link>
			<pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/bread/</guid>
			<description>This is a post that doesn&amp;rsquo;t involve any computers or technology&amp;hellip; but has definitely consumed a TON of my time and effort in the past few years.
I first started making bread many years ago using the no knead method. It was easy, 4 ingredients, and the only piece of equipment needed was a dutch oven (~$40). The bread that came out of this tasted like magic. You put some raw boring ingredients in (flour, water, salt, and some instant yeast), and out came something warm, ready for a ton of butter.</description>
			<content type="html"><![CDATA[<p>This is a post that doesn&rsquo;t involve any computers or technology&hellip; but has definitely consumed a TON of my time and effort in the past few years.</p>
<p>I first started making bread many years ago using the no knead method. It was easy, 4 ingredients, and the only piece of equipment needed was a dutch oven (~$40). The bread that came out of this tasted like magic. You put some raw boring ingredients in (flour, water, salt, and some instant yeast), and out came something warm, ready for a ton of butter. It was too easy to stand at the kitchen counter and eat half of a loaf of bread.</p>
<p><a href="https://cooking.nytimes.com/recipes/11376-no-knead-bread">Mark Bittman&rsquo;s No Knead Bread</a></p>
<p><img src="/bread/dutchoven.jpg" alt=""></p>
<p>I used this recipe for years, and the loaves were always delicious and foolproof. The dutch oven steams the bread as it rises for about 30 minutes, then you take the lid off for the last 15 minutes, and it gets nice and browned. Here is an example loaf I made using this recipe:</p>
<p><img src="/bread/loaf3.jpg" alt=""></p>
<p>After a few years, I purchased some new books:</p>
<p>#1 <a href="https://www.amazon.com/Flour-Water-Salt-Yeast-Fundamentals/dp/160774273X">Flour Water Salt Yeast by Ken Forkish</a></p>
<p>#2 <a href="https://www.amazon.com/Bread-Bakers-Apprentice-15th-Anniversary/dp/1607748657/">The Bread Baker&rsquo;s Apprentice by Peter Reinhart</a></p>
<p>And I can safely say, Ken Forkish is a genius. His book is my #1 reccomendation to people looking to get into this. I have gifted it multiple times and have converted a bunch of people to bread bakers. I get text messages nearly weekly with pictures of freshly baked loaves of bread that friends want to share with my, years after getting them hooked on bread baking.</p>
<p>His techniques are simple, and easy to apply to all doughs moving forward. Pizza doughs, bread doughs, etc. He works with a very high hydration dough (high water content), which makes this great textured bread with tons of air pockets.</p>
<p>There is also a lot of interesting sourdough (levain) recipes that involved a sourdough starter that lived in my fridge for some amount of time and was periodically fed more flour and water to capture the natural yeast and lactobacilli that are floating around the air all around us.</p>
<p><img src="/bread/loaf1.jpg" alt=""></p>
<p><img src="/bread/loaf2.jpg" alt=""></p>
<p><img src="/bread/loaf4.jpg" alt=""></p>
<p><img src="/bread/loaf5.jpg" alt=""></p>
<p><img src="/bread/loaf6.jpg" alt=""></p>
<p><img src="/bread/loaf7.jpg" alt=""></p>
<p>For other types of bread (ciabatta, challah, english muffins, bagels, cinnamon buns, sticky buns, baguettes, bagels, etc) the Bread Baker&rsquo;s Apprentice provided a way of rounding out my bread-sperience.</p>
<p><img src="/bread/englishmuffins.jpg" alt=""></p>
<p><img src="/bread/cinnamonbun.jpg" alt=""></p>
<p><img src="/bread/ciabatta.jpg" alt=""></p>
<p><img src="/bread/ciabatta2.jpg" alt=""></p>
<p><img src="/bread/challah.jpg" alt=""></p>
<p><img src="/bread/baguettes.jpg" alt=""></p>
<figure>
    <img src="/bread/baguettes2.jpg"
         alt="Ran out of oven width&amp;hellip;. panic ensued&amp;hellip; hockey stick bread resulted&amp;hellip;"/> <figcaption>
            <p>Ran out of oven width&hellip;. panic ensued&hellip; hockey stick bread resulted&hellip;</p>
        </figcaption>
</figure>

<p><img src="/bread/baguettes3.jpg" alt=""></p>
<p><img src="/bread/bagels.jpg" alt=""></p>
<p><img src="/bread/wheatwalnut.jpg" alt=""></p>
<p>Here is some layered croissant dough. Every line is a layer of butter in between folds of dough that once baked will turn into the flakey, deliciousness.</p>
<p><img src="/bread/croissantdough.jpg" alt=""></p>
<p><img src="/bread/croissants.jpg" alt=""></p>
<figure>
    <img src="/bread/foccacia.jpg"
         alt="A rosemary, potato foccacia"/> <figcaption>
            <p>A rosemary, potato foccacia</p>
        </figcaption>
</figure>

<p>Some awesome sticky buns from <a href="https://www.amazon.com/Food-Lab-Cooking-Through-Science/dp/0393081087">The Food Lab by J. Kenji López-Alt</a></p>
<p>This is another must-have book that I have nearly cooked my whole way through&hellip; but this post is for bread only!</p>
<p><img src="/bread/stickybuns.jpg" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>SSTV Image From ISS</title>
			<link>https://spkelly.com/posts/sstvfromiss/</link>
			<pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/sstvfromiss/</guid>
			<description>Ever since I started messing around with SDR and HAM radio, I have been eager to receive something from the ISS. I have tried a few times as it passed overhead with my handheld radio, but never had any luck.
A few times a year, the ISS transmits SSTV (slow-scan tv) signals with their onboard radio transmitter, to commemorate certain events. These can be monitored at ARISS (Amateur Radio on the International Space Station):</description>
			<content type="html"><![CDATA[<p>Ever since I started messing around with SDR and HAM radio, I have been eager to receive something from the ISS. I have tried a few times as it passed overhead with my handheld radio, but never had any luck.</p>
<p>A few times a year, the ISS transmits SSTV (slow-scan tv) signals with their onboard radio transmitter, to commemorate certain events. These can be monitored at ARISS (Amateur Radio on the International Space Station):</p>
<p><a href="http://ariss-sstv.blogspot.com/">http://ariss-sstv.blogspot.com/</a></p>
<p>These transmissions only last a few days, and you need to have a decent pass overhead of the ISS during this window to try and receive a signal.</p>
<p>Well the blog above had an event coming up that I wanted to try and receive!</p>
<p>&ldquo;SSTV from December 28, 2019 until January 1, 2020
ARISS will be supporting SSTV transmissions worldwide in memory of cosmonaut Alexei Leonov. Event runs from Dec 28 (11:00 UTC is the setup time) until Jan 1, 2020 (18:20 UTC when the system is scheduled for shutdown). Transmissions should be on the standard frequency of 145.800 MHz and in the PD 120 format.&rdquo;</p>
<p>I checked <a href="https://www.heavens-above.com/PassSummary.aspx">https://www.heavens-above.com/PassSummary.aspx</a> and found a pass that wasn&rsquo;t in the middle of the night (for my own sanity&hellip;)</p>
<p>I decided to use my SDR to record the audio transmission, so that I could post process the results after the fact and I could tweak the gain and do a bit of filtering as well if needed. I setup my dipole antenna for 145.8 MHz, tuned SDR# to 145.8 as well, and waited for the pass.</p>
<p>SSTV is pretty interesting, it takes about 100 seconds to receive 240 lines of a colored image using frequency modulation with a pretty small bandwidth of up to 3kHz!</p>
<p><a href="https://en.wikipedia.org/wiki/Slow-scan_television">https://en.wikipedia.org/wiki/Slow-scan_television</a></p>
<p>Since a pass lasts only a few minutes, I got the tail end of one image followed by a gap of transmission during the prime overhead portion of the pass, and a 2nd image during the tail end of the pass.</p>
<p>I used <a href="https://hamsoft.ca/pages/mmsstv.php">MMSSTV</a> to decode the image from my recorded .wav of the pass. I set my computer up to loopback audio, set the input source in MMSSTV to be the output from my laptop with a <a href="https://www.vb-audio.com/Cable/">virtual audio cable</a>, and used mode auto-detect (PD120).</p>
<p>Here is what the end/start of the images look like, there is a header that contains a start tone, some calibration data, and some other signalling codes that are used to identify the mode of encoding. This header is where the green line is.</p>
<p><img src="/sstv/startend.png" alt=""></p>
<p>Here is the full image I got towards the end of the pass overhead!</p>
<p><img src="/sstv/full.png" alt=""></p>
<p>I submitted my image as proof to ARISS and received this certificate:</p>
<p><img src="/sstv/award.png" alt=""></p>
<p>Edit:
2 Days later, I was still within the transmission window and had another decent pass coming in. Here was what I got:</p>
<p><img src="/sstv/attempt_2.png" alt=""></p>
<p>Pretty frustrating, here is a diagram of the pass. The images take ~2 minutes to transmit, followed by 2 minutes of radio silence, and then they start transmission of a new image. I drew the red line on the 2 minutes of silence part of this &ldquo;perfect&rdquo; pass. The image I did get was on the tail end of the pass. I heard everything loud and clear on the entry and the exit, but the 2 minutes of silence during the prime portion was no fun!</p>
<p><img src="/sstv/pass.png" alt=""></p>
<p>I should have used my radio to ask them to slow down.</p>
]]></content>
		</item>
		
		<item>
			<title>Website Update</title>
			<link>https://spkelly.com/posts/websiteupdate/</link>
			<pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/websiteupdate/</guid>
			<description>Prior to this post, I had been hosting this website on a home server for a few years. It was originally just a project log using wordpress, without too much thought into how I would manage it.
Since 100% of the content is static, wordpress was overkill. For my use case, it was overcomplicated, slow-ish, and a potential security headache.
I considered converting all of the posts to individual HTML pages, with a decent index.</description>
			<content type="html"><![CDATA[<p>Prior to this post, I had been hosting this website on a home server for a few years. It was originally just a project log using wordpress, without too much thought into how I would manage it.</p>
<p>Since 100% of the content is static, wordpress was overkill. For my use case, it was overcomplicated, slow-ish, and a potential security headache.</p>
<p>I considered converting all of the posts to individual HTML pages, with a decent index.html and some minor css. Upon investigating some of the latest frameworks (jekyll, hugo, react, etc) I decided on hugo which is written in Go <a href="https://gohugo.io/">https://gohugo.io/</a>.</p>
<p><img src="/websiteupdate/hugo.png" alt=""></p>
<p>I chose this primarily for it&rsquo;s simplicity and speed for a static site. Building the site went pretty quickly, now all of my posts/projects are each a single markdown file, and adding a new project is as simple as adding a new markdown file.</p>
<p>The second phase of this project was to move hosting to something free. The site is so small (&lt;100Mb) that I figured there had to be somewhere free to host it. I considered AWS free tier, but in the end went with Github Pages. I had seen quite a few .github.io pages in the past and wanted to see how straightforward it was to use for my use case.</p>
<p>I moved all of my sourcecode into a <a href="https://github.com/xconverge/spkelly">GitHub repo</a>, configured the pages repo to use the docs/ folder as the content, and it was then publicly available! Easy. Next up was to add a CNAME record and switch to a custom domain name.</p>
<p><a href="https://www.spkelly.com">https://www.spkelly.com</a> was now reborn!</p>
<p>Lastly, I hooked up a Cloudflare free tier account, so that the github pages content can be cached, sped up (even though the site does not have much in terms of overhead/comp), and readily available incase of outages.</p>
<p>Another great benefit is that this solution offers SSL, so now the site can utilize HTTPS. Prior to this I needed to maintain my own SSL certificate from LetsEncrypt.</p>
]]></content>
		</item>
		
		<item>
			<title>RTL-SDR</title>
			<link>https://spkelly.com/posts/rtlsdr/</link>
			<pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/rtlsdr/</guid>
			<description>SDR (Software defined radio) is a technology that shrinks all of the amplifiers/mixers/components of a radio system into a tiny USB dongle and some computer software.
This is the kit I bought for $30: Amazon link
Then I installed some free software SDR# which allows you to tune filters and gain and install plugins.
First up, I wanted to try and capture data from a NOAA satellite as it passed overhead.</description>
			<content type="html"><![CDATA[<p>SDR (Software defined radio) is a technology that shrinks all of the amplifiers/mixers/components of a radio system into a tiny USB dongle and some computer software.</p>
<p>This is the kit I bought for $30:
<img src="/rtlsdr/rtlsdrkit.jpg" alt=""></p>
<p><a href="https://www.amazon.com/RTL-SDR-Blog-RTL2832U-Software-Defined/dp/B011HVUEME/">Amazon link</a></p>
<p>Then I installed some free software SDR# which allows you to tune filters and gain and install plugins.</p>
<p>First up, I wanted to try and capture data from a NOAA satellite as it passed overhead. These satellites are constantly transmitting data/images at 137Mhz and when in range, this data can easily be received and decoded.</p>
<p>I setup my antenna for this particular type of signal and frequency range using this diagram:
<img src="/rtlsdr/adams_V-dipole.png" alt=""></p>
<p><img src="/rtlsdr/antenna.jpg" alt=""></p>
<p>Then I opened up a program called WxTrack, put in my lat/long and was able to determine when the next pass would be.</p>
<p><img src="/rtlsdr/wxtrack.png" alt=""></p>
<p>I put my antenna outside, waited for the pass to start, and then started recording the audio as it was transmitted.</p>
<p><img src="/rtlsdr/noaa_waveform.png" alt=""></p>
<p>Once the signal disappeared, I stopped the recording, and ran the file through <a href="https://github.com/martinber/noaa-apt">noaa-apt</a> which then helped generate this image!</p>
<p><img src="/rtlsdr/test1.jpg" alt=""></p>
<p>Next up I wanted to try and receive data from a newer satellite known as METEOR-M2. This is a newer russian satellite that transmits a digital signal. There was another METEOR satellite that was supposed to be launched in 2017, however didn’t make it successfully to be operational. This digital signal then has to be demodulated and decoded into the image. This satellite has images that are ~10x higher resolution than the older NOAA satellites, however there is currently only 1 operational (vs ~4 for NOAA) so there are limited opportunities to receive data. Another is planned to be launched in July 2019, so we will see what sort of data that transmits! Here is the wave form during the METEOR-M2 pass:</p>
<p><img src="/rtlsdr/meteor-m2_waveform.png" alt=""></p>
<p>And then here is what was generated from the decoding of the data!</p>
<p><img src="/rtlsdr/2019-6-29-10-29-47-795-rectified.jpg" alt=""></p>
<p>Next I wanted to track airplanes near me using their ADS-B protocol. This is a signal coming in at 1090Mhz so this is the antenna configuration necessary:</p>
<p><img src="/rtlsdr/antenna2.jpg" alt=""></p>
<p>I ran some software called RTL1090 which uses the hardware to decode the data being received and send it via TCP to PlanePlotter which shows the planes in a visual way</p>
<p><img src="/rtlsdr/Capture.png" alt=""></p>
<p>I verified with FlightAware that this data/flights/call signs matched!</p>
<p><img src="/rtlsdr/Capture2.png" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>Battery Reconditioning</title>
			<link>https://spkelly.com/posts/batteryreconditioning/</link>
			<pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/batteryreconditioning/</guid>
			<description>Recently I came across a project where someone was using an off the shelf digital multimeter, power supply, and electronic load to recondition hybrid batteries. This involved disassembling the full pack of cells, testing, removing, and replacing bad cells, replacing contacts, etc, before doing multiple charge and discharge cycles to verify the improvement and condition of the battery. To charge, the power supply was turned on while logging with the DMM, to discharge, the eload was used in various modes (constant current, constant power) to quantify the capacity of the cell or pack of cells.</description>
			<content type="html"><![CDATA[<p>Recently I came across a project where someone was using an off the shelf digital multimeter, power supply, and electronic load to recondition hybrid batteries. This involved disassembling the full pack of cells, testing, removing, and replacing bad cells, replacing contacts, etc, before doing multiple charge and discharge cycles to verify the improvement and condition of the battery. To charge, the power supply was turned on while logging with the DMM, to discharge, the eload was used in various modes (constant current, constant power) to quantify the capacity of the cell or pack of cells. This was all done with separate softwares and had to be closely monitored to avoid damage to the pack or equipment.</p>
<p>There was already an existing open source software that could plot and log data from the DMM using the RS232 interface.</p>
<p><a href="https://www.26th.net/public/projects/vc8145/">https://www.26th.net/public/projects/vc8145/</a></p>
<p><img src="/batterycharging/vc8145orig.png" alt=""></p>
<p><img src="/batterycharging/vc8145.jpg" alt=""></p>
<p>He was using this SW, in conjunction with some software in Chinese that came with the power supply and electronic load. Both pieces of hardware had RS232 interfaces as well.</p>
<p><img src="/batterycharging/eload.jpg" alt="Electronic load"></p>
<p><img src="/batterycharging/hspy.png" alt="Power supply"></p>
<p>The first step was to interpret the communication protocol for each one of these devices and add the functionality into the DMM logging software so that we have a single piece of software that can talk to all 3 devices via RS232. This will allow us to synchronize usage of the devices in the future.</p>
<p>The communication protocols for these devices were very difficult to find. For the power supply, I had to contact an ebay seller, and they sent me a comm protocol in chinese. Google translate did a decent job of getting something that was usable for prototyping.</p>
<p>With the help of a serial sniffer, I was able to duplicate the packet structures for both new devices. The eload uses a 26 byte frame formatted like this:</p>
<p><img src="/batterycharging/eloadPackets.png" alt=""></p>
<p>The checksum was simply the sum of the previous 25 bytes. I created another Qt widget for the eload, added some controls, added a communication thread to handle the serial communication and implementation of this protocol, and now had control of the electronic load!</p>
<p>The power supply communication proved to be a bit trickier due to the translated documentation&hellip;</p>
<p><img src="/batterycharging/psupacket.png" alt=""></p>
<p>Hmm&hellip;so it looks like there is a mandatory silent period before and after the packet. The packet then has a dynamic size based on the type of command being sent. Finally a 16bit crc is done on the data. Again using the packet sniffer I sent some commands using the existing software (all in chinese) and reverse engineered the commands for my purpose. I was able to create dummy packets in a unit test with the same contents from my serial sniffing tests to verify my crc algorithm was outputting the same results. With some experimentation I figured out how the voltage always had a x100 multiplier on the value and the current had a x10 multiplier, this allowed 2 bytes to represent relatively fine currents and voltages. I then created another Qt widget and comm thread to manage the power supply and the new comm protocol.</p>
<p>Once I could control all 3 devices properly, I then added a few minor extras for ease of use:</p>
<ul>
<li>Ability to zoom the plot easily</li>
<li>Reset zoom</li>
<li>Load old log data to the plot</li>
<li>Ability to delete data from the log (in the case of a bad data point that ruins scaling)</li>
<li>Confirmation dialogs</li>
<li>Touch friendly interface controls for a touch screen</li>
<li>Settings file with window layouts and stored settings for pretty much all numerical settings</li>
<li>The ability to log voltage data from both the eload and the psu so that the DMM is not 100% necessary</li>
<li>Safety settings for minimum and maximum voltages before turning devices off</li>
</ul>
<p>The final part of this project was to take all of this newfound power and synchronize usage of the devices in a way that automated the original methods for reconditioning the batteries.</p>
<p>I created what I called the workflow controller. I wanted a way to input a formula or series of steps and press GO. I wanted steps like charge with x settings, sleep for 10 minutes, discharge with x settings, sleep for 10 minutes.</p>
<p>I decided to use yaml and yaml-cpp for its relative ease of use. I added the yaml-cpp dependency and came up with a schema I wanted to use. A valid workflow looks something like this:</p>
<pre><code>- type: charge
  voltage: 20
  current: 10
  deltav: 1
  timeout: 1
  maxvoltage: 300

- type: wait
  timeout: 1

- type: discharge
  current: -1
  power: 400
  dropthresholdvoltage: 0.5
  dropthresholdtime: 1.0
  timeout: 1
  minvoltage: 10.4

- type: wait
  timeout: 1

- type: charge
  voltage: 40
  current: 20
  deltav: 3
  timeout: 1
  maxvoltage: 300

- type: charge
  voltage: 20
  current: 10
  deltav: 1
  timeout: 1
  maxvoltage: 300
 
- type: wait
  timeout: 1
 
- type: discharge
  current: -1
  power: 400
  dropthresholdvoltage: 0.5
  dropthresholdtime: 1.0
  timeout: 1
  minvoltage: 10.4
 
- type: wait
  timeout: 1
 
- type: charge
  voltage: 40
  current: 20
  deltav: 3
  timeout: 1
  maxvoltage: 300
</code></pre><p>I would then load this file, and parse it into a vector of SequenceCommands with the applicable settings. I then created a thread that when started, will tick every 10ms, check the state of all inputs, and increment to the next command or step of the sequence if certain criteria were met.</p>
<p>Whether charging, discharging, or sleeping, a timeout was active which if reached would consider the step done and move on (after turning off all devices in use). When charging a voltage and current were set and sent to the PSU, then the voltage was monitored for a charge complete scenario. When discharging, you can either use power or constant current modes, and again the voltage is monitored for a discharge or minimum voltage scenario.</p>
<p><img src="/batterycharging/workflow.png" alt="Example workflow loaded"></p>
<p>The end result is the ability to put a new battery cell or pack onto the rig, hook everything up, load a sequence, press “Start”, and come back in several hours later with a completed cycle!</p>
<p><img src="/batterycharging/screenshot.png" alt="Additional widgets for workflow, electronic load, and power supply added"></p>
]]></content>
		</item>
		
		<item>
			<title>Visual Studio Code VIM Extension</title>
			<link>https://spkelly.com/posts/vscodevim/</link>
			<pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/vscodevim/</guid>
			<description>Microsoft came out with an open source text editor called Visual Studio Code. The cool thing about this application was that it was cross-platform so I could move seamlessly between MacOS, Ubuntu, and Windows 10 and always be using the same editor, extensions, and environment. I will save the conversation about Electron, the framework that this application uses for another time.
I started using the VSCodeVim extension to have Vim style keybindings (essential for my productivity), but found quite a few annoyances with the plugin.</description>
			<content type="html"><![CDATA[<p>Microsoft came out with an open source text editor called Visual Studio Code. The cool thing about this application was that it was cross-platform so I could move seamlessly between MacOS, Ubuntu, and Windows 10 and always be using the same editor, extensions, and environment. I will save the conversation about Electron, the framework that this application uses for another time.</p>
<p>I started using the VSCodeVim extension to have Vim style keybindings (essential for my productivity), but found quite a few annoyances with the plugin. The extension was written in TypeScript (which I didn&rsquo;t know at the time) but I decided to start contributing some bug fixes for issues that annoyed ME and figured I would learn typescript along the way.</p>
<p><a href="https://github.com/VSCodeVim/Vim">https://github.com/VSCodeVim/Vim</a></p>
<p><img src="/vscodevim/vim1.png" alt=""></p>
<p>Next thing I know I was one of the core maintainers of the extension and was contributing very often. I learned an enormous amount about open-source development, managing a community, and working with typescript. Currently, the extension has over 300,000 installs (2019 update: 7.9 million&hellip;), and using telemetry we can see that there are over 8,000 active users every day. This is pretty exciting and is cool to be shipping code to that many users.</p>
<p>At the time of writing this, I have 172 commits to the extensions repository (2019 update: 370+). The group of developers working on this is interesting, it is mostly the main developer, a few Microsoft employees from the visual studio code team, and myself, although the plugin has had many many contributors in the past. It is cool to see Microsoft invested in helping develop plugins to further the adoption of their open source software.</p>
<p>I continue to contribute to the extension weekly, and somehow managed to really really like typescript in the end&hellip;</p>
]]></content>
		</item>
		
		<item>
			<title>Smoker Temperature Controller</title>
			<link>https://spkelly.com/posts/smokercontroller/</link>
			<pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/smokercontroller/</guid>
			<description>https://github.com/xconverge/SmokerController
I wanted a smoker so I chose the Weber Smokey Mountain! I got the 22″ version so that I can load it with a few racks of ribs with no issues.
This smoker uses charcoal as the heat source. Out of the box, you control the burn rate using vents on the bottom of the unit, with properly spread and lit charcoal, you can sustain 230 degrees for 7 or 8 hours with no problems before needing to add more fuel.</description>
			<content type="html"><![CDATA[<p><a href="https://github.com/xconverge/SmokerController">https://github.com/xconverge/SmokerController</a></p>
<p>I wanted a smoker so I chose the Weber Smokey Mountain! I got the 22″ version so that I can load it with a few racks of ribs with no issues.</p>
<p><img src="/smokercontroller/smoker1.jpg" alt=""></p>
<p>This smoker uses charcoal as the heat source. Out of the box, you control the burn rate using vents on the bottom of the unit, with properly spread and lit charcoal, you can sustain 230 degrees for 7 or 8 hours with no problems before needing to add more fuel.</p>
<p>I wanted a way of controlling the temperature to within a few degrees of my setpoint (230 degrees) without needing to adjust the vents a bit every so often. I decided I would close 2 of the 3 vents and put a blower on the third vent to control how active the charcoal is burning, and accurately control the temperature.</p>
<p>Everything is running on a RaspberryPi which is powered with a 10000mAh mobile battery pack.</p>
<p>When the temperature falls below a threshold, the fan turns on to heat up the charcoal. When it hits another threshold, the fan shuts down.</p>
<p>There is also a sqlite3 database of all of the past temperatures for plotting using the google chart API.</p>
<p>The temperature probe is a Maverick ET-73 replacement probe from Amazon.</p>
<p><img src="/smokercontroller/smoker5.jpg" alt=""></p>
<p>The first thing I had to do once I received the probe was characterize it to create a polynomial equation to correlate resistance to temperature. These probes are not linear.</p>
<p>Ice water, room temp water, and boiling water was used to find 3 data points of resistance/temp. I then solved the system of equations to model it after the Steinhart-Hart equation for resistance. The coefficients matched the curve pretty well.</p>
<p>I then used a voltage divider with a 10k ohm fixed resistance to read the probe into the A2D chip. I used a MCP3008 a2d which is a 10 bit 8 channel ADC with SPI.</p>
<p>SPI was then used to interface between the a2d and the raspberry pi</p>
<p>Screenshot of the interface</p>
<p><img src="/smokercontroller/smoker6.jpg" alt=""></p>
<p>Here is the blower mechanism I made using a 12v fan and a tomato can.</p>
<p><img src="/smokercontroller/smoker4.jpg" alt=""></p>
<p><img src="/smokercontroller/smoker2.jpg" alt=""></p>
<p>I used a toggle bolt to be able to temporarily mount the can to the smoker vent.</p>
<p><img src="/smokercontroller/smoker3.jpg" alt=""></p>
<p>Below is the log file from a run with a few racks of ribs and a brisket! The set point was 275 degrees. You can see in the middle of the plot, a point where the fan was turning on and off every minute or so. The large drops are from when I opened the smoker to flip or sauce something. Overall I think that the WSM smoker is pretty stable either way due to having a water pan inside, however as the water pan emptied (towards the right hand side of the plot) the controller is nice to make sure temperatures do not spike too high.</p>
<p><img src="/smokercontroller/brisket_ribs.png" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>Drawing Robot</title>
			<link>https://spkelly.com/posts/drawingrobot/</link>
			<pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/drawingrobot/</guid>
			<description>This was a quick Friday afternoon project that turned into a demo of precise machine control for dispensing applications.
I wrote a GCode interpreter in C# that converts GCode to V+ which was used to control the Adept robot with the marker on the end. GCode is a language commonly used in machining and CNC primarily.
I then used a python based image to GCode library to convert images to GCode paths.</description>
			<content type="html"><![CDATA[<p>This was a quick Friday afternoon project that turned into a demo of precise machine control for dispensing applications.</p>
<p>I wrote a GCode interpreter in C# that converts GCode to V+ which was used to control the Adept robot with the marker on the end. GCode is a language commonly used in machining and CNC primarily.</p>
<p>I then used a python based image to GCode library to convert images to GCode paths.</p>
<p>The last step was to run the GCode through my interpreter and see what comes out the other side&hellip;</p>
<p><img src="/drawingrobot/robot_daftpunk.jpg" alt=""></p>
<p>A bit abstract but not bad for a first run, after some tweaks to the python script for thresholds and edge finding I got some crisper results.</p>
<p>A few different drawings&hellip;</p>
<p><img src="/drawingrobot/robot_portrait.jpg" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>Delta Robot</title>
			<link>https://spkelly.com/posts/deltarobot/</link>
			<pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/deltarobot/</guid>
			<description>My friend Vince and I wanted to put my new 3D printer (see previous post) to good use!
We decided to design and build a delta style pick and place robot from scratch.
Vince started with the CAD. A large majority of this project was done on the train to/from work. We decided on threaded rod for the parallel links, and some u-joints from McMaster-Carr for to give us some of the motion we needed.</description>
			<content type="html"><![CDATA[<p>My friend Vince and I wanted to put my new 3D printer (see previous post) to good use!</p>
<p>We decided to design and build a delta style pick and place robot from scratch.</p>
<p>Vince started with the CAD. A large majority of this project was done on the train to/from work. We decided on threaded rod for the parallel links, and some u-joints from McMaster-Carr for to give us some of the motion we needed. Once he finished up the CAD, we ordered parts and got to work printing&hellip;</p>
<p><img src="/deltarobot/delta3.jpg" alt=""></p>
<p>All of the green and white parts were printed on the prusa i3 printer I made in the previous post.</p>
<p>We used limit switches to perform a homing sequence before moving to 0 degrees.</p>
<p><img src="/deltarobot/delta1.jpg" alt=""></p>
<p>Here is the platform where you could attach an end effector, arrows for +X and +Y to visualize directional information during programming.</p>
<p><img src="/deltarobot/delta2.jpg" alt=""></p>
<p>Vince has a lot of experience with the kinematics and the controller we were using so he did all of that. I wrote a motor controller driver that then plugged into the output of the kinematics library to move the inner links exactly where we needed them to be.</p>
<p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/4ukGmMkM1rc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/t80brzQN3pk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
</p>
]]></content>
		</item>
		
		<item>
			<title>3D Printer Prusa i3</title>
			<link>https://spkelly.com/posts/3dprinter/</link>
			<pubDate>Mon, 15 Jul 2013 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/3dprinter/</guid>
			<description>I chose the Prusa i3 (http://reprap.org/wiki/Prusa_i3) as the 3D printer I wanted to build due to it’s rigidity and amount of information online related to it. At the time of making this, 3D printing was starting to get popular but was not NEARLY as popular as it is as you read this. Kits were not as available, amazon did not sell 3D printers, so I decided to make my own from plans and forum posts found online.</description>
			<content type="html"><![CDATA[<p>I chose the Prusa i3 (<a href="http://reprap.org/wiki/Prusa_i3">http://reprap.org/wiki/Prusa_i3</a>) as the 3D printer I wanted to build due to it’s rigidity and amount of information online related to it. At the time of making this, 3D printing was starting to get popular but was not NEARLY as popular as it is as you read this. Kits were not as available, amazon did not sell 3D printers, so I decided to make my own from plans and forum posts found online.</p>
<p>24V power supply, 5 steppers, threaded and smooth rods, waterjet aluminum frame arrived.</p>
<p><img src="/reprap/reprap1.jpg" alt=""></p>
<p>Printed parts from someone elses printer on ebay to make my printer arrived!</p>
<p><img src="/reprap/reprap2.jpg" alt=""></p>
<p>Time to get started&hellip;</p>
<p><img src="/reprap/reprap3.jpg" alt=""></p>
<p>Start of the frame that will hold the Y axis/table primarily</p>
<p><img src="/reprap/reprap4.jpg" alt=""></p>
<p>Added the rest of the frame, once tightened down, this is very solid and very rigid. I am glad I chose aluminum!</p>
<p><img src="/reprap/reprap5.jpg" alt=""></p>
<p>Y axis, linear bearings installed and belt clamp installed. The belt clamp will attach to the belt that is driven by the stepper motor for this axis.</p>
<p><img src="/reprap/reprap6.jpg" alt=""></p>
<p>Starting to come together</p>
<p><img src="/reprap/reprap7.jpg" alt=""></p>
<p>Time to add the X axis and Z axis linear rails and bearings.</p>
<p><img src="/reprap/reprap8.jpg" alt=""></p>
<p>Hotend, extruder get mounted to the x carriage. Z threaded rod installed and X belt installed. Heated bed PCB and limit switches for homing also installed.</p>
<p><img src="/reprap/reprap9.jpg" alt=""></p>
<p>PCB after assembly, bought unassembled to save 30$. SMT microcontroller came on the empty pcb.</p>
<p><img src="/reprap/reprap10.jpg" alt=""></p>
<p>The bootloader was not on the chip so I had to reflash the chip using another Arduino as a programmer.</p>
<p><img src="/reprap/reprap11.jpg" alt=""></p>
<p>Everything wired up, blue painters tape on the glass on the heated bed to prevent the parts from sticking.</p>
<p><img src="/reprap/reprap12.jpg" alt=""></p>
<p>First print is a 20mm x 20mm x 10mm square so that I can verify calibration.</p>
<p><img src="/reprap/reprap13.jpg" alt="">
<img src="/reprap/reprap17.jpg" alt=""></p>
<p>I had to change a lot of parameters in the firmware I am using to interpret the GCode. The firmware I am using is Marlin (<a href="https://github.com/MarlinFirmware/Marlin">https://github.com/MarlinFirmware/Marlin</a>)</p>
<p>Printing a new herringbone gear for my extruder because the one I have isn’t very clean.</p>
<p><img src="/reprap/reprap14.jpg" alt=""></p>
<p>Minion&hellip;because&hellip;minion.</p>
<p><img src="/reprap/reprap15.jpg" alt="">
<img src="/reprap/reprap18.jpg" alt=""></p>
<p>I then upgraded a bit and printed a spool holder to hold the filament.</p>
<p><img src="/reprap/reprap19.jpg" alt=""></p>
<p>Printed a few bottle openers for friends.</p>
<p><img src="/reprap/reprap20.jpg" alt=""></p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/3461Owj75_Q" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content>
		</item>
		
		<item>
			<title>MobileEyes iOS App</title>
			<link>https://spkelly.com/posts/mobileeyes/</link>
			<pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/mobileeyes/</guid>
			<description>I developed this iOS application to control an Adept mobile robot platform in my free time.
90% of this was done in hotels and airplanes while travelling for work.
I was able to VPN to work from a Southwest plane, and connect to a mobile robot and send it to different parts of the building using XCode from 40,000 feet.
Once I submitted the application to the Apple app store, they asked me to send them a video of the application working before they would approve it.</description>
			<content type="html"><![CDATA[<p>I developed this iOS application to control an Adept mobile robot platform in my free time.</p>
<p>90% of this was done in hotels and airplanes while travelling for work.</p>
<p>I was able to VPN to work from a Southwest plane, and connect to a mobile robot and send it to different parts of the building using XCode from 40,000 feet.</p>
<p>Once I submitted the application to the Apple app store, they asked me to send them a video of the application working before they would approve it. Below is the video that I sent them. I thought it was interesting that they went through these lengths for every app that was requesting to be added to the store!</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/6BrHRSzHdWM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p><a href="https://itunes.apple.com/us/app/imobileeyes/id667698015">https://itunes.apple.com/us/app/imobileeyes/id667698015</a></p>
]]></content>
		</item>
		
		<item>
			<title>Word Clock</title>
			<link>https://spkelly.com/posts/wordclock/</link>
			<pubDate>Sun, 24 Mar 2013 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/wordclock/</guid>
			<description>This was a rushed project that actually turned out pretty well from the outside! It was based mostly on this instructable as the inspiration and reference
First I went to office max and had 3 or 4 transparencies printed out with the pattern I wanted for the front. I wanted multiple copies so that when I put them all on top of each other, the darkened black sections were truly opaque.</description>
			<content type="html"><![CDATA[<p>This was a rushed project that actually turned out pretty well from the outside! It was based mostly on this instructable as the inspiration and reference</p>
<p>First I went to office max and had 3 or 4 transparencies printed out with the pattern I wanted for the front. I wanted multiple copies so that when I put them all on top of each other, the darkened black sections were truly opaque.</p>
<p><img src="/wordclock/wordclock1.jpg" alt=""></p>
<p>I used a ribbon cable for all of the LEDs so that the control board could easily be removed from the led/frame section. I opted to use an atmega328 programmed with the arduino bootloader. This was the first time doing this without just using an off the shelf arduino. For the cost of a microcontroller, oscillator, and capacitor, this is very handy for future use! I used an arduino that I already had, swapped chips, programmed the bootloader, then removed my freshly programmed chip and put it onto my protoboard (socketless like a maniac).</p>
<p>I finished wiring up the circuit, the shift registers, etc before moving on to the programming of the atmega328.</p>
<p><img src="/wordclock/wordclock2.jpg" alt=""></p>
<p>Not exactly kosher protoboard usage but it will work for this&hellip;</p>
<p><img src="/wordclock/wordclock3.jpg" alt=""></p>
<p>I created some baffles from some cardboard I had laying around&hellip;.and started to feed in the led strips for each section.</p>
<p>Once all of the hardware was in place, I modified some of the existing code to match the pinouts that I was using and was good to go!</p>
<p><img src="/wordclock/wordclock4.jpg" alt=""></p>
<p>Done!</p>
]]></content>
		</item>
		
		<item>
			<title>Kegerator</title>
			<link>https://spkelly.com/posts/kegerator/</link>
			<pubDate>Sun, 18 Sep 2011 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/kegerator/</guid>
			<description>As I started home brewing more, I wanted to avoid the pain of bottling the entire batch of fermented beer. I decided to convert a fridge to a kegerator.
I bought the fridge new at Lowes for $200. Immediately upon bringing it home, I removed the “freezer” section (just a shelf on this particular fridge). Some mini fridges have cooling elements in this shelf. If there are cooling elements in the shelf, you have to SLOWLY bend the shelf out of the way and hope that you don’t puncture any of the cooling elements.</description>
			<content type="html"><![CDATA[<p>As I started home brewing more, I wanted to avoid the pain of bottling the entire batch of fermented beer. I decided to convert a fridge to a kegerator.</p>
<p>I bought the fridge new at Lowes for $200. Immediately upon bringing it home, I removed the “freezer” section (just a shelf on this particular fridge). Some mini fridges have cooling elements in this shelf. If there are cooling elements in the shelf, you have to SLOWLY bend the shelf out of the way and hope that you don’t puncture any of the cooling elements. If you do break an element, the fridge is garbage unfortunately. This was why I chose a fridge with an easily removable shelf.</p>
<p>Next up, I slowly peeled the top of the fridge off, it was just held on with glue. This exposed a foam layer. I carefully carved away at the foam layer with the intention of finding a safe place to drill (away from cooling lines), and so that I could place a piece of wood in the top to mount the tap tower to.</p>
<p><img src="/kegerator/kegerator1.jpg" alt=""></p>
<p>I carefully made it to the area where the cooling lines were, and drilled my hole. I placed a copper tube in the hole which would transfer some of the coolness from the fridge into the tower, to keep the hose (and beer) cool, and prevent foaming.</p>
<p><img src="/kegerator/kegerator3.jpg" alt=""></p>
<p>I then applied a bit of glue, and reassembled the top in the reverse order. Once the top was back in place and glued on, I was able to mount the tower, and screw it into the supporting wood.</p>
<p><img src="/kegerator/kegerator4.jpg" alt=""></p>
<p>This fridge fits 1 corny keg and the co2 tank inside perfectly, along with some 6 packs or extra bottles in the back.</p>
<p><img src="/kegerator/kegerator2.jpg" alt=""></p>
<p>Success!</p>
]]></content>
		</item>
		
		<item>
			<title>Advanced Manufacturing Lab M1 Abrams Tank</title>
			<link>https://spkelly.com/posts/aml/</link>
			<pubDate>Fri, 25 Mar 2011 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/aml/</guid>
			<description>I was on a team of 11 students tasked with building 300 scale models of an M1 Abrams Tank. We split up responsibilities and handled everything from designing packaging, designing and machining plastic injection molds, and automated assembly.
I worked on the automated assembly of the tank once the parts were already made. I also worked a few 3 hours shifts on the injection molding machine to get as many of our parts made as we could throughout the semester.</description>
			<content type="html"><![CDATA[<p>I was on a team of 11 students tasked with building 300 scale models of an M1 Abrams Tank. We split up responsibilities and handled everything from designing packaging, designing and machining plastic injection molds, and automated assembly.</p>
<p>I worked on the automated assembly of the tank once the parts were already made. I also worked a few 3 hours shifts on the injection molding machine to get as many of our parts made as we could throughout the semester.</p>
<p>We had a 6 axis Staubli robot and a 4 axis Adept Cobra robot. I was just a part of a larger team here but I did quite a bit of fixture design, machining, and robot programming to help the automated assembly be a reality. In the end, we assembled a few using the robots, but it was faster to just build them by hand in the last few days of the semester&hellip;oops.</p>
<p><img src="/aml/aml1.jpg" alt=""></p>
<p>Fresh out of the injection mold</p>
<p><img src="/aml/aml2.jpg" alt=""></p>
<p>Fixture to dispense axles into the hull. I designed and built this little XY table that used an actuator and then the staubli robot.</p>
<p><img src="/aml/aml3.jpg" alt=""></p>
<p>The robots for assembly along with conveyor to move the completed parts from one subassembly area to the other subassembly area.</p>
<p><img src="/aml/aml4.jpg" alt=""></p>
<p>Finished product without the packaging</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/eeaQml1Exos" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content>
		</item>
		
		<item>
			<title>Roadway Animal Detection System</title>
			<link>https://spkelly.com/posts/argus/</link>
			<pubDate>Sun, 28 Feb 2010 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/argus/</guid>
			<description>Tom came to me with an idea for a roadway animal detection system. He had already done extensive research on the market and wanted me to develop the product with him. We took a summer program where we brought our idea from idea to prototype and patent.
This was essentially a break beam system however since there were multiple types of beams on the system, we could also tell direction. Filtering and adjustments were done for different animal sizes.</description>
			<content type="html"><![CDATA[<p>Tom came to me with an idea for a roadway animal detection system. He had already done extensive research on the market and wanted me to develop the product with him. We took a summer program where we brought our idea from idea to prototype and patent.</p>
<p><img src="/argus/argus2.png" alt=""></p>
<p>This was essentially a break beam system however since there were multiple types of beams on the system, we could also tell direction. Filtering and adjustments were done for different animal sizes.</p>
<p><img src="/argus/argus3.jpg" alt=""></p>
<p>Here is a picture of one of the initial prototypes. You can see the laser photo receiver on the left and on the opposite side of the pole is an active powered infrared emitter/receiver combination sensor. The top of the pole had a small solar panel that kept the internals of the system powered.</p>
<p><img src="/argus/argus1.png" alt=""></p>
<p><a href="https://www.google.com/patents/US20110227733">https://www.google.com/patents/US20110227733</a></p>
]]></content>
		</item>
		
		<item>
			<title>DIY 720p Projector</title>
			<link>https://spkelly.com/posts/projector/</link>
			<pubDate>Mon, 25 May 2009 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/projector/</guid>
			<description>I wanted to build a projector from parts and see what I could do!
First up I needed a light source, for this I used a 400 watt metal halide bulb. This was very cheap (~$40 for the ballast and $10 for the bulb) and output a ton of light. The downsides were the amount of heat generated and the size and weight of the ballast. I used an ikea mixing bowl as the reflector to get as much light to the front of the box as possible.</description>
			<content type="html"><![CDATA[<p>I wanted to build a projector from parts and see what I could do!</p>
<p><img src="/projector/projector_2.jpg" alt=""></p>
<p>First up I needed a light source, for this I used a 400 watt metal halide bulb. This was very cheap (~$40 for the ballast and $10 for the bulb) and output a ton of light. The downsides were the amount of heat generated and the size and weight of the ballast. I used an ikea mixing bowl as the reflector to get as much light to the front of the box as possible.</p>
<p><img src="/projector/projector_3.jpg" alt=""></p>
<p>The first iteration of the enclosure and projection lens focusing mechanism was not pretty but it worked. The stain looks silly&hellip;</p>
<p><img src="/projector/projector_5.jpg" alt=""></p>
<p>The insides, in the back you can see the ike mixing bowl reflector and 400 watt metal halide bulb. Then there is a fresnel lens that takes the light and projects it straight through the lcd. The lcd was scavenged from a 720p monitor, so the control board and power supply are seen in front of it. The light then comes out of the lcd, and goes through a 2nd fresnel lens which projects it perfectly onto the front  projection lens. All of these distances were important to have a focused image with maximum brightness and nothing cutoff.</p>
<p><img src="/projector/projector_4.jpg" alt=""></p>
<p>First test image!</p>
<p><img src="/projector/projector_6.jpg" alt=""></p>
<p>My first focusing mechanism did not work well at all. This is the new and improved shower drain focus mechanism. The best part about this is that you can just screw the lens in and out to move linearly and stay perfectly square, while allowing you to adjust your focus, perfect!</p>
<p><img src="/projector/projector_7.jpg" alt=""></p>
<p>The beginnings of the table that I would put this monstrosity in. This diy projector was huge so my plan was to “hide” it inside the table, instead of in the back of the room or behind the couch area.</p>
<p><img src="/projector/projector_8.jpg" alt=""></p>
<p>The top of the table pieced together, glue and screws holding it together, receives its final layer of polyurethane.</p>
<p><img src="/projector/projector_9.jpg" alt=""></p>
<p>The finished product!</p>
<p><img src="/projector/projector_10.jpg" alt=""></p>
<p>What makes it all worth doing!</p>
<p>Some basic specs for my projector are as follows</p>
<p>720p resolution (uses a  1280×800 lcd monitor)
Accepts vga inputs, but I have a vga to component converter to use component sources</p>
<p>Thermostat set to 80 degrees F. When the projector is on, the cooling fans run, and then when switched off, the fans continue to run until the ambient temperature inside the box reaches 80 degrees.</p>
<p>Parts list:</p>
<p>Standard Triplet
220 and 330 fresnels
400watt mh ballast
400w bulb and mogul(gold-blue, silver-white just a note that i am making for myself on hooking up the mogul)
x2gen MW15A widescreen 15 inch lcd (1280×800 res)
ffc extension for the lcd
1/2 inch birch plywood for the enclosure
2 120mm quiet case fans
various switches, power input modules, terminal blocks
ikea stabil boiler reflector
attic thermostat</p>
<p>Table:
ripped 2×4’s into 2×2’s and built a frame. Then put 1/2 inch birch plywood over it. I made a pine surface and used rub on polyurethane for a few coats and then clear coated it with a lacquer</p>
<p>Total cost for entire build (including the small trips to home depot): $600</p>
<p>I originally had a build log on a forum called lumenlab. A user there contacted me from Popular Science and asked if they could do a feature. A photo crew came to my apartment and made me pose like a goober but overall it was a fun experience. Here are some of the clippings from the feature.</p>
<p><img src="/projector/popsci1.jpg" alt=""></p>
<p><img src="/projector/popsci2.jpg" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>Snow Maker</title>
			<link>https://spkelly.com/posts/snowmaker/</link>
			<pubDate>Sun, 04 May 2008 00:00:00 +0000</pubDate>
			
			<guid>https://spkelly.com/posts/snowmaker/</guid>
			<description>I built a snowgun that used an air compressor and pressure washer to make ~3-4 inches per hour. An overnight run easily resulted in over a foot of snow in a pretty large area.
Conditions needed to be right, low humidity and temperatures &amp;lt; 34 or so. Using this chart I could find a night when everything lined up in October.
The problem is my backyard is flat&amp;hellip; so I will need a drop in to do some jumps and rails with friends.</description>
			<content type="html"><![CDATA[<p>I built a snowgun that used an air compressor and pressure washer to make ~3-4 inches per hour. An overnight run easily resulted in over a foot of snow in a pretty large area.</p>
<p><img src="/snowmaker/snowmaker1.jpg" alt=""></p>
<p>Conditions needed to be right, low humidity and temperatures &lt; 34 or so. Using this chart I could find a night when everything lined up in October.</p>
<p>The problem is my backyard is flat&hellip; so I will need a drop in to do some jumps and rails with friends.</p>
<p>Keep in mind I did not know what CAD was at this time&hellip;</p>
<p><img src="/snowmaker/snowmaker2.jpg" alt=""></p>
<p>Alright starting to come together&hellip;looks a little&hellip;steep..</p>
<p><img src="/snowmaker/snowmaker3.jpg" alt=""></p>
<p>Perfect! Just need snow now (can see a pvc flat rail made in the back)</p>
<p><img src="/snowmaker/snowmaker4.jpg" alt=""></p>
<p>Cue the SM4 snowgun I made.</p>
<p><img src="/snowmaker/snowmaker5.jpg" alt=""></p>
<p><img src="/snowmaker/snowmaker6.jpg" alt=""></p>
<p>Decent coverage, does about 3 inches per hour over this area.</p>
<p><img src="/snowmaker/snowmaker7.jpg" alt=""></p>
<p><img src="/snowmaker/snowmaker8.jpg" alt=""></p>
<p>Time to leave it for the night and come back to it in the morning with some friends, skis, and snowboards.</p>
]]></content>
		</item>
		
	</channel>
</rss>
